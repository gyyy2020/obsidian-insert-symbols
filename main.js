/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/

var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// main.ts
var main_exports = {};
__export(main_exports, {
  default: () => InsertSymbolPlugin
});
module.exports = __toCommonJS(main_exports);
var import_obsidian = require("obsidian");

// symbols.ts
var SYMBOL_CATEGORIES = {
  "Arrows": [
    { "name": "Left Arrow", "symbol": "\u2190" },
    { "name": "Up Arrow", "symbol": "\u2191" },
    { "name": "Right Arrow", "symbol": "\u2192" },
    { "name": "Down Arrow", "symbol": "\u2193" },
    { "name": "Left Right Arrow", "symbol": "\u2194" },
    { "name": "Up Down Arrow", "symbol": "\u2195" }
  ],
  "Greek Letters": [
    { "name": "Alpha", "symbol": "\u03B1" },
    { "name": "Beta", "symbol": "\u03B2" },
    { "name": "Gamma", "symbol": "\u03B3" },
    { "name": "Delta", "symbol": "\u03B4" },
    { "name": "Epsilon", "symbol": "\u03B5" },
    { "name": "Zeta", "symbol": "\u03B6" },
    { "name": "Eta", "symbol": "\u03B7" },
    { "name": "Theta", "symbol": "\u03B8" },
    { "name": "Iota", "symbol": "\u03B9" },
    { "name": "Kappa", "symbol": "\u03BA" },
    { "name": "Lambda", "symbol": "\u03BB" },
    { "name": "Mu", "symbol": "\u03BC" },
    { "name": "Nu", "symbol": "\u03BD" },
    { "name": "Xi", "symbol": "\u03BE" },
    { "name": "Omicron", "symbol": "\u03BF" },
    { "name": "Pi", "symbol": "\u03C0" },
    { "name": "Rho", "symbol": "\u03C1" },
    { "name": "Sigma", "symbol": "\u03C3" },
    { "name": "Tau", "symbol": "\u03C4" },
    { "name": "Upsilon", "symbol": "\u03C5" },
    { "name": "Phi", "symbol": "\u03C6" },
    { "name": "Chi", "symbol": "\u03C7" },
    { "name": "Psi", "symbol": "\u03C8" },
    { "name": "Omega", "symbol": "\u03C9" }
  ],
  "Math Symbols": [
    { "name": "Infinity", "symbol": "\u221E" },
    { "name": "Pi", "symbol": "\u03C0" },
    { "name": "Sum", "symbol": "\u2211" },
    { "name": "Integral", "symbol": "\u222B" },
    { "name": "Not Equal", "symbol": "\u2260" },
    { "name": "Greater Than or Equal To", "symbol": "\u2265" },
    { "name": "Less Than or Equal To", "symbol": "\u2264" }
  ]
};

// main.ts
var InsertSymbolPlugin = class extends import_obsidian.Plugin {
  async onload() {
    this.addCommand({
      id: "insert-symbol",
      name: "Insert Symbol",
      editorCallback: (editor, view) => {
        this.showCategoryMenu(editor, view);
      }
    });
  }
  showCategoryMenu(editor, view) {
    const menu = new import_obsidian.Menu();
    for (const category in SYMBOL_CATEGORIES) {
      menu.addItem((item) => {
        item.setTitle(category).onClick(() => {
          this.showSymbolMenu(category, editor, view);
        });
      });
    }
    const leaf = view.leaf;
    const editorView = leaf.view.editor.cm;
    const coords = editorView.coordsAtPos(editorView.state.selection.main.head);
    menu.showAtPosition({ x: coords.left, y: coords.top + 20 });
  }
  showSymbolMenu(category, editor, view) {
    const menu = new import_obsidian.Menu();
    const symbols = SYMBOL_CATEGORIES[category];
    symbols.forEach((symbol) => {
      menu.addItem((item) => {
        item.setTitle(`${symbol.name} (${symbol.symbol})`).onClick(() => {
          editor.replaceSelection(symbol.symbol);
        });
      });
    });
    const leaf = view.leaf;
    const editorView = leaf.view.editor.cm;
    const coords = editorView.coordsAtPos(editorView.state.selection.main.head);
    menu.showAtPosition({ x: coords.left, y: coords.top + 20 });
  }
};
